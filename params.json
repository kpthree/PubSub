{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Pubsub","tagline":"PubSub is a dependency free library with coalescing and Hierarchical publishing","google":"UA-38037929-1","body":"## PubSub\r\n\r\nPubSub is a dependency free library with coalescing and Hierarchical publishing\r\n\r\n## Examples\r\n\r\n### Basic example without coalescing\r\n```javascript\r\n// Create a subscriber callback (listener) to listen\r\n// to update events on table grid\r\nvar fnUpdateDataStore = function(topic, data) {\r\n    console.log(topic);\r\n    console.log(data);\r\n}\r\n// Subscribe to a save event of table grid\r\nvar saveToken = PubSub.subscribe(\"TableStore\", // name\r\n                                 \"widgets.table-grid.save\", // topic\r\n                                 null, // context\r\n                                 fnUpdateDataStore); // callback\r\n\r\n// Publish with updated data when the user hits save\r\n// of the table grid widget\r\nPubSub.publish(\"widgets.table-grid.save\", // topic\r\n               { updatedRow: { name:\"Charlie C\", age: 32 }}, // data\r\n               false); // coalesce\r\n\r\n// console.log: widgets.table-grid.save\r\n// console.log: {updatedRow: {age: 32, name: \"Charlie C\"}}\r\n```\r\n### Basic example with coalescing\r\n```javascript\r\n// Create a subscriber callback (listener) to listen\r\n// to scroll event on table grid\r\nvar fnLoadMoreData = function(topic, data) {\r\n    console.log(topic);\r\n    console.log(data);\r\n}\r\n// Subscribe to a scroll event of table grid\r\nvar scrollToken = PubSub.subscribe(\"TableStore\",\r\n                                   \"widgets.table-grid.scroll\",\r\n                                   null,\r\n                                   fnLoadMoreData);\r\n\r\n// Publish with updated scroll position when the user scroll\r\nPubSub.publish(\"widgets.table-grid.scroll\",\r\n               { scrollPos: { top: 400}},\r\n               true);\r\nPubSub.publish(\"widgets.table-grid.scroll\",\r\n               { scrollPos: { top: 458}},\r\n               true);\r\nPubSub.publish(\"widgets.table-grid.scroll\",\r\n               { scrollPos: { top: 497}},\r\n               true);\r\n// Since scroll events are very fast occurring events,\r\n// the interest is always in the final position of scrollbar\r\n\r\n// console.log: widgets.table-grid.scroll\r\n// console.log: { scrollPos: { top: 497}}\r\n// note: subscriber is called only once (if published within coalescing interval. Default: 4000 ms)\r\n```\r\n\r\n### Hierarchical publishing\r\n```javascript\r\n// Create a subscriber callback (listener) to listen\r\n// to update events on table grid\r\nvar fnUpdateTableLayout = function(topic, data) {\r\n    console.log(\"Table layout updated\");\r\n    console.log(topic);\r\n    console.log(data);\r\n}\r\nvar fnColumnRemove = function(topic, data) {\r\n    console.log(\"Column removed\");\r\n    console.log(topic);\r\n    console.log(data);\r\n}\r\nvar fnRowRemove = function(topic, data) {\r\n    console.log(\"Row removed\");\r\n    console.log(topic);\r\n    console.log(data);\r\n}\r\n// Subscribe to row level topics of table grid\r\nvar rToken = PubSub.subscribe(\"TableView\",\r\n                              \"widgets.table-grid.view.row-rm\",\r\n                              null,\r\n                              fnRowRemove);\r\n// Subscribe to column level topics of table grid\r\nvar cToken = PubSub.subscribe(\"TableView\",\r\n                              \"widgets.table-grid.view.column-rm\",\r\n                              null,\r\n                              fnColumnRemove);\r\n// Subscribe to any view updates on table grid\r\nvar tToken = PubSub.subscribe(\"TableView\",\r\n                              \"widgets.table-grid.view.*\", // note the asterisk\r\n                              null,\r\n                              fnUpdateTableLayout);\r\n\r\n// Publish when a row is removed\r\nPubSub.publish(\"widgets.table-grid.view.row-rm\",\r\n               { row: { id: 1}},\r\n               false);\r\n// console.log: Row removed\r\n// console.log: widgets.table-grid.view.row-rm\r\n// console.log: { row: { id: 1}}\r\n// console.log: Table layout updated\r\n// console.log: widgets.table-grid.view.row-rm\r\n// console.log: { row: { id: 1}}\r\n\r\n// Publish when a column is removed\r\nPubSub.publish(\"widgets.table-grid.view.column-rm\",\r\n               { column: { id: 3}},\r\n               false);\r\n// console.log: Column removed\r\n// console.log: widgets.table-grid.view.column-rm\r\n// console.log: { column: { id: 3}}\r\n// console.log: Table layout updated\r\n// console.log: widgets.table-grid.view.column-rm\r\n// console.log: { column: { id: 3}}\r\n\r\n// so, lets say you want to subscribe to all the topic under widgets\r\nvar fnWidgetUpdate = function() {\r\n    console.log(\"Widget updated\");\r\n}\r\nvar gWidgetToken = PubSub.subscribe(\"Widgets\",\r\n                                    \"widgets.*\",\r\n                                    null,\r\n                                    fnWidgetUpdate);\r\nPubSub.publish(\"widgets.table-grid.view\",\r\n               \"view change 1\",\r\n               false);\r\nPubSub.publish(\"widgets.table-grid.view\",\r\n               \"view change 2\",\r\n               false);\r\nPubSub.publish(\"widgets.table-grid\",\r\n               \"table grid push\",\r\n               false);\r\nPubSub.publish(\"widgets\",\r\n               \"widgetssss push\",\r\n               false);\r\n// console.log: Widget updated\r\n// console.log: Widget updated\r\n// console.log: Widget updated\r\n// note: only 3 calls to fnWidgetUpdate as we have subscribed\r\n//       to all topics under widgets\r\n```\r\n\r\n### Subscribing with context\r\n```javascript\r\n// Create a subscriber callback (listener) to listen\r\n// to update events on table grid\r\nvar fnUpdateTableView = function(topic, data) {\r\n    console.log(\"Width: \" + this.w);\r\n    console.log(\"Height: \" + this.h);\r\n}\r\n// Subscribe to a save event of table grid\r\nvar token = PubSub.subscribe(\"TableStore\",\r\n                             \"widgets.table-grid.view\",\r\n                             {w: 300, h: 500, t: 30, l: 60}, // can be table grid object\r\n                             fnUpdateTableView);\r\n\r\nPubSub.publish(\"widgets.table-grid.view\",\r\n               \"table refreshed\",\r\n               false); \r\n\r\n// console.log: Width: 300\r\n// console.log: Height: 500\r\n\r\n```\r\n"}